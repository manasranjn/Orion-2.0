## Types of Components
- There are 2 types of components in react.
  1. Class Based Component
  2. Functional Component or Function Based Component

# Difference between Class Component and Functional Component
- Class Component :-
  - Use class keyword and class name
  - Statefull
  - It has no Hooks
  - It has lifecycle methods
  - It use render() method
  - Syntax:
    import React from "react";
    import { Component } from "react";

class ClassComponentName extends Component {
render() {
return (

<div>
<h1>Class Component</h1>
</div>
);
}
}
export default ClassComponent;

- Functional Component :-
  - Use function keyword and function name
  - Stateless
  - It has Hooks
  - It doesn't have lifecycle methods
  - It doesn't use render() method
  - Syntax:
    import React from "react";
    const Navbar = () => {
    return (
    <div>
    <h1>Navbar</h1>
    </div>
    );
    };

export default Navbar;

# Props
- Props are inbuilt features of react.
- Props are used to pass data from parent to child component.
- Props are immutable, it means once the value is passed from parent component, it can't be changed.
- Props are uni-directional.

e.g :-
- Write a program to send a string data as props.
  App.jsx :
  import React from "react";
  import Content from "./Components/Content";

const App = () => {
return (

<div>
<Content name="Rahul" />
</div>
);
};

export default App;

Content.jsx :
import React from "react";
const Content = (props) => {
return (

<div>
<h1>{props.name}</h1>
</div>
);
};
export default Content;

- Write a program to send an array as props.
  App.jsx :
  import React from "react";
  import Content from "./Components/Content";

const App = () => {
return (

<div>
<Content mark={[1, 2, 3, 4, 5]} />
</div>
)
};

export default App;

Content.jsx :
import React from "react";
const Content = ({mark}) => {
return (

<div>
<h1>
      Mark: 
        {mark.map((item) => (
          <p>{item}</p>
        ))}
      </h1>
</div>
);
};
export default Content;

- Write a program to send an object as props.
  App.jsx :
  import React from "react";
  import Content from "./Components/Content";

const App = () => {
return (

<div>
<Content name={{ firstName: "Rahul", lastName: "Gupta" }} />
</div>
);
};

export default App;

Content.jsx :
import React from "react";
const Content = (props) => {
return (

<div>
<h1>{props.name.firstName}</h1>
<h1>{props.name.lastName}</h1>
</div>
);
};
export default Content;

# Props Drilling

- It is a process by which we can pass the data from one part of the react component tree to another by going through other parts that does not need the data but only help in passing it around.
  e.g : App -> Content -> SubContent

Example:-
import React from "react";
import Content from "./Components/Content";
const App = () => {
return (

<div>
<Content name="Nikita" course="B.Tech" place="Cuttack" />
</div>
)}
export default App;

Content.jsx :
import React from "react";
import SubContent from "./Components/SubContent";
const Content = (props) => {
return (

<div>
<h1>SubContent Component</h1>
<SubContent name={props.name} course={props.course} place={props.place} />
</div>
)};
export default Content;

SubContent.jsx :
import React from "react";
const SubContent = (props) => {
return (

<div>
<h1>{props.name}</h1>
<h1>{props.course}</h1>
<h1>{props.place}</h1>
</div>
)}
export default SubContent;

# Hooks:
- Hooks are like inbuilt methods in react.
- hooks always starts with a prefix "use".
- Whenever we want to use a hook, we have to import it from "react", import { useState } from "react". Import statement is mandatory.
- Hooks are only used in functional component.
- We have many Hooks in react, these are some of them:
  - useState
  - useEffect
  - useReducer ... etc

# States in React:
- States are used to create dynamic data in the UI.
- States are mutable, states value can be changed.
- States are local, states can only be used inside the component.
- By default Functional Component doesn't have states. But we can add states using Hooks "useState".

## UseState:
- It is a Hook where we use it in Functional Component to create states.
- We can pass or store any type of data in the states.(string, number, object, array, boolean)
- Syntax:
  const [state, setState] = useState(initialState);
  state -> Current value of the state/ identifier.
  setState -> Function to update the state.
  useState -> It is a Hook
  initialState -> It is a default value of the state.

Example:-
Write a program to create a counter using useState Hook.

App.jsx :
import React from "react";
import Counter from "./Components/Counter";
import "./App.css";

const App = () => {
return (

<div id="app">
<Counter />
</div>
);
};

export default App;

Counter.jsx :
import React, { useState } from "react";

const Counter = () => {
const [counter, setCounter] = useState(0);
// console.log(counter);

const increment = () => {
setCounter(counter + 1);
};

const decrement = () => {
setCounter(counter - 1);
};

const reset = () => {
setCounter(0);
};

return (

<div>
<h1 className="count">Count is: {counter}</h1>
<button className="btn" onClick={increment}>
Increment
</button>
<button className="btn" onClick={decrement}>
Decrement
</button>
<button className="btn" onClick={() => setCounter(counter + 5)}>
Increment by 5
</button>
<button className="btn" onClick={reset}>
Reset
</button>
</div>
);
};

export default Counter;

# Types of CSS in React:
1. Inline CSS :
- It is an tyoe of css where we will be applying for individually inside one particular tag using style attribute.
- The CSS properties should be writen in camelCase inside an expression like style={{ color: "red" }} in the form of Object inside the style attribute of the tag.

2. Style Object :
- In style object we write the styles in a object, which written outside the JSX and inside the same component.

3. Global CSS :
- It is a type of CSS where we will be maintaining one CSS file for the entire react project.
- It will target all the Components in the project.
- We have to create a separate CSS file inside the "src" folder with an extension of ".css" and import it in the parent component "App.jsx".

4. Module CSS :
- It is a type of CSS where we will be maintaining one CSS file for each component.
- Whenever we are using module CSS, we have to create a separate CSS file for each component with an extension of ".module.css" and import it in the component.
  e.g : filename.module.css

# useEffect():
- It is a Hook in React.
- It allows us to perform side effects in functional components.
- It is used for fetching data from an API, updating the document title, and more.
- It has 3 trpes of dependencies:
  - No dependency :- useEffect(() => {})
  - Empty dependency :- useEffect(() => {}, [])
  - Value dependency :- useEffect(() => {}, [value])

# Lists in React:
- To display data in an ordered format.
- The map() method is used for traversing the array/list.

Example:-
import React, { useState, useEffect } from "react";

const UserData = () => {
const [data, setData] = useState([]);

const getUsers = async () => {
const response = await fetch("https://jsonplaceholder.typicode.com/users");

    const data = await response.json();
    setData(data);
    console.log(data);

};

useEffect(() => {
getUsers();
}, []);

return (

<div>
{data.map((item, index) => {
return (
<div key={item.id}>
<p>Name: {item.name}</p>
<p>Email: {item.email}</p>
<p>Address: {item.address.street}</p>
<p>Company: {item.company.name}</p>
</div>
);
})}
</div>
);
};

export default UserData;

# Reference in React:
- It is a inbuilt object in React.
- It is used to target elements in react.
- By default it will be having key-value pair of "current: undefined".
- ref will always uses Real DOM.
- In Functional Component, we have to use useRef() Hook to create reference.
- e.g: const inputRef = useRef();

example:-
import React, { useRef } from "react";

const Reference = () => {
const reference = useRef();
console.log(reference); // {current: undefined}
let changeColor = () => {
reference.current.style.color = "red";
}
return(

  <div>
    <h1 ref={reference}>Reference</h1>
    <button onClick={changeColor}>Click</button>
  </div>
)}
export default Reference

# Form Handling in React:
1. Uncontrolled Forms
2. Controlled Forms

## UnControlled Forms
- It is a form where it is created using reference concept.
- In Functional components, we have to use useRef() Hook to create uncontrolled form.
- These forms are completely handled by DOM itself.
- Suppose if we have to take input from user, first the data will be taken by DOM and then we will be taking the data from DOM.

example:-
import React, { useRef } from "react";

const UncontrolledForm = () => {
const fName = useRef();
const lName = useRef();

const handleSubmit = (e) => {
e.preventDefault();
const name = {
firstName: fName.current.value,
lastName: lName.current.value,
};
console.log(name);
};

return (


<form>
<input type="text" placeholder="First Name" ref={fName} />
<input type="text" placeholder="Last Name" ref={lName} />
<button onClick={handleSubmit}> Submit </button>
</form>
)};
export default UncontrolledForm;

## Controlled Form
- Thse forms are created using states in React.
- In functional component we use useState() to create controlled forms.
- These Forms are completely handled by developers where we will be taking the data from the users by using "onChange" event.
  example:-
  import React, { useState } from "react";

const ControlledForm = () => {
const [name, setName] = useState("");
const [email, setEmail] = useState("");
const [password, setPassword] = useState("");

const getName = (e) => {
setName(e.target.value);
};
const getEmail = (e) => {
setEmail(e.target.value);
};
const submitData = (e) => {
e.preventDefault();
let data = {
name: name,
email: email,
password: password,
};
console.log(data);
setEmail("");
setName("");
setPassword("");
};
return (

<form>
<label>Name: </label>
<input type="text" value={name} onChange={getName} /> <br />
<label>Email: </label>
<input type="email" value={email} onChange={getEmail} /> <br />
<label>Password: </label>
<input
type="password"
value={password}
onChange={(e) => setPassword(e.target.value)}
/>
<br />
<button onClick={submitData}>Submit</button>
</form>
)};
export default ControlledForm;

# useContext():-
- Context is a way to share data between components without having to pass props down the component tree.
- useContext() is a hook that allows you to consume context values in your functional components.
- To create a context, use the createContext() method. This returns a Context object that can be used to provide and consume values.
- To provide a value to a child component, use the "Context.Provider" component. This component accepts a value prop that is passed down to child components.
- To consume a value in a child component, use the useContext() hook. This hook takes a Context object as its argument and returns the current value of the context.
- We can use multiple context values in a single component by nesting
  Context.Provider components.
- Overuse of context can make our code harder to understand and maintain.

# React Router-
## What is a Router in React JS -
A router in React JS is a library that allows us to navigate between different pages or views within a single-page application (SPA). It manages the URLs of your application and maps them to the appropriate components to render.

## Why do we need Router in React JS
- A router is needed in React JS to provide a seamless user experience when navigating through different parts of a SPA. Without a router, you would have to manually manage the state of the application and manually render different components based on the current URL.

## How to use Router in React JS
- To use a router in React JS, you need to first install a router library such as "react-router-dom" using a package manager like npm. Once installed, you can import the necessary components from the library, such as "BrowserRouter", "Routes", "Route", and "Link", and use them in your React components to define the routes and navigation behaviour of your application.
- "BrowserRouter" is a component that should wrap your entire application and provides the history and location objects to your components. The history object keeps track of the browser's history, and the location object contains information about the current URL.
- "Routes" is a component that wraps multiple Route components and renders Route that matches the current URL.
- "Route" is a component that defines a route in your application. You can specify the path for the route and the component that should be rendered when the route is matched.
- "Link" is a component that provides declarative, accessible navigation around your application. It creates an HTML anchor tag with the appropriate href attribute based on the specified path.
- Nested-Routes - You can also define nested routes in React JS by using the Route component inside another Route component. This allows you to create more complex routes and nested navigation in your application.
- Route Parameters - You can also define route parameters in React JS by adding a colon followed by a parameter name in the path of the Route component. The parameter value can then be accessed in the component that is rendered for that route.
- Route-Guards - You can also add route guards in React JS to protect certain routes from being accessed by unauthorized users. This can be done by adding a function that checks if the user is authenticated before allowing access to the route.
