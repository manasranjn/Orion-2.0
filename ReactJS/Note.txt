## Types of Components
- There are 2 types of components in react.
  1. Class Based Component
  2. Functional Component or Function Based Component

# Difference between Class Component and Functional Component
- Class Component :-
  - Use class keyword and class name
  - Statefull
  - It has no Hooks
  - It has lifecycle methods
  - It use render() method
  - Syntax:
    import React from "react";
    import { Component } from "react";

class ClassComponentName extends Component {
render() {
return (

<div>
<h1>Class Component</h1>
</div>
);
}
}
export default ClassComponent;

- Functional Component :-
  - Use function keyword and function name
  - Stateless
  - It has Hooks
  - It doesn't have lifecycle methods
  - It doesn't use render() method
  - Syntax:
    import React from "react";
    const Navbar = () => {
    return (
    <div>
    <h1>Navbar</h1>
    </div>
    );
    };

export default Navbar;

# Props
- Props are inbuilt features of react.
- Props are used to pass data from parent to child component.
- Props are immutable, it means once the value is passed from parent component, it can't be changed.
- Props are uni-directional.

e.g :-
- Write a program to send a string data as props.
  App.jsx :
  import React from "react";
  import Content from "./Components/Content";

const App = () => {
return (

<div>
<Content name="Rahul" />
</div>
);
};

export default App;

Content.jsx :
import React from "react";
const Content = (props) => {
return (

<div>
<h1>{props.name}</h1>
</div>
);
};
export default Content;

- Write a program to send an array as props.
  App.jsx :
  import React from "react";
  import Content from "./Components/Content";

const App = () => {
return (

<div>
<Content mark={[1, 2, 3, 4, 5]} />
</div>
)
};

export default App;

Content.jsx :
import React from "react";
const Content = ({mark}) => {
return (

<div>
<h1>
      Mark: 
        {mark.map((item) => (
          <p>{item}</p>
        ))}
      </h1>
</div>
);
};
export default Content;

- Write a program to send an object as props.
  App.jsx :
  import React from "react";
  import Content from "./Components/Content";

const App = () => {
return (

<div>
<Content name={{ firstName: "Rahul", lastName: "Gupta" }} />
</div>
);
};

export default App;

Content.jsx :
import React from "react";
const Content = (props) => {
return (

<div>
<h1>{props.name.firstName}</h1>
<h1>{props.name.lastName}</h1>
</div>
);
};
export default Content;

# Props Drilling

- It is a process by which we can pass the data from one part of the react component tree to another by going through other parts that does not need the data but only help in passing it around.
  e.g : App -> Content -> SubContent

Example:-
import React from "react";
import Content from "./Components/Content";
const App = () => {
return (

<div>
<Content name="Nikita" course="B.Tech" place="Cuttack" />
</div>
)}
export default App;

Content.jsx :
import React from "react";
import SubContent from "./Components/SubContent";
const Content = (props) => {
return (

<div>
<h1>SubContent Component</h1>
<SubContent name={props.name} course={props.course} place={props.place} />
</div>
)};
export default Content;

SubContent.jsx :
import React from "react";
const SubContent = (props) => {
return (

<div>
<h1>{props.name}</h1>
<h1>{props.course}</h1>
<h1>{props.place}</h1>
</div>
)}
export default SubContent;

# Hooks:
- Hooks are like inbuilt methods in react.
- hooks always starts with a prefix "use".
- Whenever we want to use a hook, we have to import it from "react", import { useState } from "react". Import statement is mandatory.
- Hooks are only used in functional component.
- We have many Hooks in react, these are some of them:
  - useState
  - useEffect
  - useReducer ... etc

# States in React:
- States are used to create dynamic data in the UI.
- States are mutable, states value can be changed.
- States are local, states can only be used inside the component.
- By default Functional Component doesn't have states. But we can add states using Hooks "useState".

## UseState:
- It is a Hook where we use it in Functional Component to create states.
- We can pass or store any type of data in the states.(string, number, object, array, boolean)
- Syntax:
  const [state, setState] = useState(initialState);
  state -> Current value of the state/ identifier.
  setState -> Function to update the state.
  useState -> It is a Hook
  initialState -> It is a default value of the state.

Example:-
Write a program to create a counter using useState Hook.

App.jsx :
import React from "react";
import Counter from "./Components/Counter";
import "./App.css";

const App = () => {
return (

<div id="app">
<Counter />
</div>
);
};

export default App;

Counter.jsx :
import React, { useState } from "react";

const Counter = () => {
const [counter, setCounter] = useState(0);
// console.log(counter);

const increment = () => {
setCounter(counter + 1);
};

const decrement = () => {
setCounter(counter - 1);
};

const reset = () => {
setCounter(0);
};

return (

<div>
<h1 className="count">Count is: {counter}</h1>
<button className="btn" onClick={increment}>
Increment
</button>
<button className="btn" onClick={decrement}>
Decrement
</button>
<button className="btn" onClick={() => setCounter(counter + 5)}>
Increment by 5
</button>
<button className="btn" onClick={reset}>
Reset
</button>
</div>
);
};

export default Counter;

# Types of CSS in React:
1. Inline CSS :
- It is an tyoe of css where we will be applying for individually inside one particular tag using style attribute.
- The CSS properties should be writen in camelCase inside an expression like style={{ color: "red" }} in the form of Object inside the style attribute of the tag.

2. Style Object :
- In style object we write the styles in a object, which written outside the JSX and inside the same component.

3. Global CSS :
- It is a type of CSS where we will be maintaining one CSS file for the entire react project.
- It will target all the Components in the project.
- We have to create a separate CSS file inside the "src" folder with an extension of ".css" and import it in the parent component "App.jsx".

4. Module CSS :
- It is a type of CSS where we will be maintaining one CSS file for each component.
- Whenever we are using module CSS, we have to create a separate CSS file for each component with an extension of ".module.css" and import it in the component.
  e.g : filename.module.css